<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">


	<beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" id="propertyPlaceholderConfigurer">
      <beans:property name="locations" value="classpath:DB/config/*.properties"></beans:property>
   </beans:bean>




	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 어떤 종류의 화면으로 볼 거냐고 알려주는... view -->
	<!-- view라는 형태를 다르게 만들어서 쓸 수 있는 인터페이스 제공 -->
	<!-- viewResolver를 만들 수 있음 >>> costomView-->

	
	
	
	
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1"></beans:property>
	</beans:bean>
	

	<!-- 이름 찾아서 있으면 실행, 이름 있더라도 AbstractView 해주어야만 가능 -->
	<!-- 숫자 작을수록 우선순위 -->
	<!-- 파일 다운로드 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"></beans:property>
	</beans:bean>
	
<!-- 	<beans:bean class="com.iu.s5.interceptor.NoticeInterceptor" id="noticeInterceptor"></beans:bean> -->
	
	<interceptors>
		<interceptor>
			<!-- URL Pattern -->
			<mapping path="/*"/>
			
			<!-- 적용할 Interceptor class -->
			<beans:bean class="com.iu.s5.interceptor.TestInterceptor"><!-- 객체 생성 -->
			
			</beans:bean>
		</interceptor>
		
		
		
		<interceptor>
			<!-- <mapping path="/notice/noticeWrite"/>
			<mapping path="/notice/noticeUpdate"/>
			<mapping path="/notice/noticeDelete"/> -->
			<!-- mapping은 여러 개 등록 가능 -->
			
			
			<mapping path="/notice/*"/>
			<exclude-mapping path="/notice/noticeList"/><!-- 얘는 제외하고 -->
			<exclude-mapping path="/notice/noticeSelect"/>


			<beans:ref bean="noticeInterceptor"/>
			<!-- 만든 빈을 참조하게끔 만들어도 된다 -->
		</interceptor>
		
		
		<interceptor>
			<mapping path="/member/memberPage"/>
			<beans:ref bean="memberInterceptor"/>
		</interceptor>
		
		<interceptor>
			<mapping path="/qna/*"/>
			<exclude-mapping path="/qna/qnaList"/>
			<beans:ref bean="qnaInterceptor"/>
		</interceptor>
	</interceptors>
	
	<context:component-scan base-package="com.iu.s5" />
	
	
	
</beans:beans>
